<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>redis - 分类 - 黄波的博客</title><link>https://dilless.github.io/categories/redis/</link><description>redis - 分类 - 黄波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 07 Aug 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://dilless.github.io/categories/redis/" rel="self" type="application/rss+xml"/><item><title>高级篇（六）Redis 原理篇（四）内存策略</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/7-redis-principle-4-memory-policy/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/7-redis-principle-4-memory-policy/</guid><description>1. 过期策略 1.1 Redis db Redis本身是一个典型的key-value内存存储数据库，因此所有的key、value都保存在之前学习过的Dict结构中。</description></item><item><title>高级篇（五）Redis 原理篇（三）通信协议</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/5-redis-principle-3-resp-protocol/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/5-redis-principle-3-resp-protocol/</guid><description>1. RESP 协议 Redis是一个CS架构的软件，通信一般分两步（不包括pipeline和PubSub）： 客户端（client）向服务端（server</description></item><item><title>高级篇（四）Redis 原理篇（二）网络模型</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/4-redis-principle-2-network/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/4-redis-principle-2-network/</guid><description>1. Linux IO 模型 1.1 用户空间和内核空间 内核本身上来说也是一个应用，所以他本身也需要一些内存，cpu等设备资源，用户应用本身也在消耗这些资源，如果不加</description></item><item><title>高级篇（三）Redis 原理篇（一）数据结构</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/3-redis-principle-1-data-structure/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/3-redis-principle-1-data-structure/</guid><description>1. 基本数据结构 1.1 动态字符串 SDS Redis 没有直接使用 C 语言中的字符串，因为 C 语言字符串存在很多问题： 获取字符串长度的需要通过运算 非二进制安全 不可修改 R</description></item><item><title>高级篇（二）Redis 最佳实践</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/2-redis-best-practice/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/2-redis-best-practice/</guid><description>1. Redis键值设计 1.1 优雅的key结构 key 最佳实践约定： 遵循基本格式：[业务名称]:[数据名]:[id] 长度不超过44字节 不包含特殊字符 key</description></item><item><title>高级篇（一）Redis 分布式缓存</title><link>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/1-redis-distribute-cache/</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/databases/redis/itheima_redis_lesson/advanced/1-redis-distribute-cache/</guid><description>单机的Redis存在四大问题: 数据丢失问题：redis 持久化 并发能力问题：主从集群，读写分离 储存能力问题：分配集群，插槽机制动态扩容 故障恢复</description></item></channel></rss>