<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>docker - 分类 - 黄波的博客</title><link>https://boh5.github.io/categories/docker/</link><description>docker - 分类 - 黄波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 16 Aug 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://boh5.github.io/categories/docker/" rel="self" type="application/rss+xml"/><item><title>Docker 学习笔记（十二）容器安全</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/12-docker-security/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/12-docker-security/</guid><description>1. Docker 配置扫描 docker-bench-security 2. 代码和镜像漏洞扫描 CVE：国际著名的安全漏洞库，也是对已知漏洞和安全缺陷的标准化名称的列表。 代码扫描 synk 镜像扫描 trivy 3. 容器运行监</description></item><item><title>Docker 学习笔记（十一）GitHub Actions - CI/CD</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</guid><description>1. GitHub Actions GitHub Actions 是一个持续集成和持续交付 (CI/CD) 平台，可用于自动执行构建、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的</description></item><item><title>Docker 学习笔记（八）docker swarm</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/8-docker-swarm/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/8-docker-swarm/</guid><description>1. docker swarm 简介 1.1 不建议生产环境使用 docker-compose docker compose 是单机环境，物理机如果挂掉，上面的容器全部会挂掉，无法保证可靠性 无法跨机器做横向扩展 1.2 容器编排 swarm 多个 ma</description></item><item><title>Docker 学习笔记（九）docker vs podman</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/9-docker-vs-podman/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/9-docker-vs-podman/</guid><description>1. podman 简介 1.1 什么是 podman Podman 是一个基于 Linux 系统的 daemon-less 的容器引擎。 可以用来开发，管理和运行 OCI 标准的容器. podman 可以运行在 root 或者非 root 用户模式。 podman 与 docker 命令完全兼容</description></item><item><title>Docker 学习笔记（十）docker 的多架构支持</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/10-docker-arch/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/10-docker-arch/</guid><description>1. 使用 buildx 构建多架构支持的 Docker 镜像 Docker for Linux 不支持构建 arm 架构镜像，我们可以运行一个新的容器让其支持该特性，Docker 桌面版无需进行此项设置： docker run --rm</description></item><item><title>Docker 学习笔记（七）docker compose</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/7-docker-compose/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/7-docker-compose/</guid><description>1. 简介 docker-compose： 定义和运行多个 Docker 容器的应用 compose v2： Docker 官方用 GO 语言 重写 了 Docker Compose，并将其作为了 docker cli 的子命令，称为 Compose</description></item><item><title>Docker 学习笔记（六）网络</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/6-network/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/6-network/</guid><description>1. 网络基础知识 1.1 URL URL：Uniform Resource Locator（统一资源定位符），网络中每一个资源对应的唯一地址 1.2 IP 地址 IP地址是IP协议提供的一</description></item><item><title>Docker 学习笔记（二）容器快速上手</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/2-container-basic/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/2-container-basic/</guid><description>1. Docker 命令行基本操作 docker + 管理的对象（比如容器，镜像） + 具体操作（比如创建，启动，停止，删除） docker image pull nginx： 拉取一个叫nginx的docke</description></item><item><title>Docker 学习笔记（三）镜像的创建管理和发布</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/3-image/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/3-image/</guid><description>1. 镜像的获取 三种方式： pull from registry (online) 从registry拉取 public（公有） private（私有） build from Dockerfile (online) 从Dockerfile构建 load from file (offline) 文件</description></item><item><title>Docker 学习笔记（四）Dockerfile</title><link>https://boh5.github.io/posts/notes/devops/docker/imooc/4-dockerfile/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.github.io/posts/notes/devops/docker/imooc/4-dockerfile/</guid><description>1. 镜像的选择(FROM) 官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的 固定版本tag而不是每次都使用lat</description></item></channel></rss>