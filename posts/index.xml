<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 黄波的博客</title><link>https://boh5.com/posts/</link><description>所有文章 | 黄波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 06 Sep 2022 23:00:00 +0800</lastBuildDate><atom:link href="https://boh5.com/posts/" rel="self" type="application/rss+xml"/><item><title>gRPC Tips - 记录 gRPC 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/grpc/</link><pubDate>Tue, 06 Sep 2022 22:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/grpc/</guid><description>evans gRPC 客户端，交互式调用 gRPC server</description></item><item><title>Golang Backend Tips - 记录 Golang 后端开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/golang-backend/</link><pubDate>Tue, 06 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/golang-backend/</guid><description>dbdiagram 在线数据库设计工具</description></item><item><title>Golang Tips - 记录 Golang 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/common/</link><pubDate>Sun, 04 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/common/</guid><description>使用 testing.T.Parallel() 来并行运行测试，同时可以及时发现资源竞争问题 1 2 3 4 5 6 7 8 9 10 package serializer import ( &amp;#34;testing&amp;#34; ) func TestWriteProtobufToBinaryFile(t *testing.T) { t.Parallel() // ... } 使用 Testify 来简化测试的 Assertions 和 Mocks golangci-lint 配置 testpackage 和 paralleltest 来启动</description></item><item><title>深入理解 Asyncio，从零开始构建你自己的并发调度器</title><link>https://boh5.com/posts/blogs/basis/build-your-own-async/</link><pubDate>Sun, 28 Aug 2022 15:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/blogs/basis/build-your-own-async/</guid><description>Python 并发实现的两种方式： 基于回调的实现 基于生成器(协程)的实现 下面将基于两个简单的例子分别介绍如何从 0 开始以两种方式实现自己的异步框架： 相互独</description></item><item><title>Web 协议学习笔记(一) HTTP1 协议</title><link>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</guid><description>1. HTTP 协议简介 1.1 浏览器发起 HTTP 请求的典型场景 1.2 HTTP 协议格式 1.3 基于 ABNF 语义定义 HTTP 消息格式 ABNF: 扩充巴克斯-瑙尔范式 1.3.1 ABNF 操作符 空白字符：用来分隔定义中的各个</description></item><item><title>数据结构和算法学习笔记（三）二叉树</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</link><pubDate>Mon, 22 Aug 2022 20:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</guid><description>1. 遍历二叉树 递归序 1,2,4,4,4,2,5,5,5,2,1,3,6,6,6,3,7,7,7,3,1 即为递归序 先序遍历 对于每棵子树，先打印头节点，再打印左子树，再打印右子树 在递归序中，只有第一次碰到，才打印 中序遍历 对于每</description></item><item><title>数据结构和算法学习笔记（二）链表</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/2-linked-list/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/2-linked-list/</guid><description>1. 单链表和双链表 笔试 vs 面试 笔试：时间复杂度越低越好 面试：时间复杂度越低越好，空间复杂度也要低 链表题目技巧 额外数据结构记录（哈希表等） 快慢指针</description></item><item><title>K8s 学习笔记（一）基础</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/1-k8s-base/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/1-k8s-base/</guid><description>1. Kubernetes 介绍 1.1 应用部署方式的演变 直接部署在物理机 -&amp;gt; 虚拟化部署 -&amp;gt; 容器化部署 容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说： 一个容器故</description></item><item><title>K8s 学习笔记（三）Pod 详解</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/3-k8s-pod-advanced/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/3-k8s-pod-advanced/</guid><description>1. Pod 介绍 1.1 Pod 结构 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类： 用户程序所在的容器，数量可多可少 Pause容器，这是每个Pod</description></item><item><title>数据结构和算法学习笔记（一）排序算法</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/1-sort-algorithms/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/1-sort-algorithms/</guid><description>1. 复杂度和简单排序算法 1.1 时间复杂度 时间复杂度：算法总操作数的表达式中，只要高阶项，不要高阶项的系数，剩下的部分假设为 $f(n)$，则时间复杂</description></item><item><title>K8s 学习笔记（二）入门</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/2-k8s-getting-start/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/2-k8s-getting-start/</guid><description>1. Namespace Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现多套环境的资源隔离或者多租户的资源隔离。 默认情况</description></item><item><title>Docker 学习笔记（十二）容器安全</title><link>https://boh5.com/posts/notes/devops/docker/imooc/12-docker-security/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/12-docker-security/</guid><description>1. Docker 配置扫描 docker-bench-security 2. 代码和镜像漏洞扫描 CVE：国际著名的安全漏洞库，也是对已知漏洞和安全缺陷的标准化名称的列表。 代码扫描 synk 镜像扫描 trivy 3. 容器运行监</description></item><item><title>Docker 学习笔记（十一）GitHub Actions - CI/CD</title><link>https://boh5.com/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</guid><description>1. GitHub Actions GitHub Actions 是一个持续集成和持续交付 (CI/CD) 平台，可用于自动执行构建、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的</description></item><item><title>Docker 学习笔记（十）docker 的多架构支持</title><link>https://boh5.com/posts/notes/devops/docker/imooc/10-docker-arch/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/10-docker-arch/</guid><description>1. 使用 buildx 构建多架构支持的 Docker 镜像 Docker for Linux 不支持构建 arm 架构镜像，我们可以运行一个新的容器让其支持该特性，Docker 桌面版无需进行此项设置： docker run --rm</description></item><item><title>Docker 学习笔记（九）docker vs podman</title><link>https://boh5.com/posts/notes/devops/docker/imooc/9-docker-vs-podman/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/9-docker-vs-podman/</guid><description>1. podman 简介 1.1 什么是 podman Podman 是一个基于 Linux 系统的 daemon-less 的容器引擎。 可以用来开发，管理和运行 OCI 标准的容器. podman 可以运行在 root 或者非 root 用户模式。 podman 与 docker 命令完全兼容</description></item><item><title>Docker 学习笔记（八）docker swarm</title><link>https://boh5.com/posts/notes/devops/docker/imooc/8-docker-swarm/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/8-docker-swarm/</guid><description>1. docker swarm 简介 1.1 不建议生产环境使用 docker-compose docker compose 是单机环境，物理机如果挂掉，上面的容器全部会挂掉，无法保证可靠性 无法跨机器做横向扩展 1.2 容器编排 swarm 多个 ma</description></item><item><title>Docker 学习笔记（七）docker compose</title><link>https://boh5.com/posts/notes/devops/docker/imooc/7-docker-compose/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/7-docker-compose/</guid><description>1. 简介 docker-compose： 定义和运行多个 Docker 容器的应用 compose v2： Docker 官方用 GO 语言 重写 了 Docker Compose，并将其作为了 docker cli 的子命令，称为 Compose</description></item><item><title>Docker 学习笔记（四）Dockerfile</title><link>https://boh5.com/posts/notes/devops/docker/imooc/4-dockerfile/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/4-dockerfile/</guid><description>1. 镜像的选择(FROM) 官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的 固定版本tag而不是每次都使用lat</description></item><item><title>Docker 学习笔记（五）存储</title><link>https://boh5.com/posts/notes/devops/docker/imooc/5-volume/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/5-volume/</guid><description>Docker主要提供了两种方式做数据的持久化 Data Volume, 由Docker管理，(/var/lib/docker/volumes/), 持久化数据的最好方</description></item><item><title>Docker 学习笔记（六）网络</title><link>https://boh5.com/posts/notes/devops/docker/imooc/6-network/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/6-network/</guid><description>1. 网络基础知识 1.1 URL URL：Uniform Resource Locator（统一资源定位符），网络中每一个资源对应的唯一地址 1.2 IP 地址 IP地址是IP协议提供的一</description></item><item><title>Docker 学习笔记（三）镜像的创建管理和发布</title><link>https://boh5.com/posts/notes/devops/docker/imooc/3-image/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/3-image/</guid><description>1. 镜像的获取 三种方式： pull from registry (online) 从registry拉取 public（公有） private（私有） build from Dockerfile (online) 从Dockerfile构建 load from file (offline) 文件</description></item><item><title>Docker 学习笔记（二）容器快速上手</title><link>https://boh5.com/posts/notes/devops/docker/imooc/2-container-basic/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/docker/imooc/2-container-basic/</guid><description>1. Docker 命令行基本操作 docker + 管理的对象（比如容器，镜像） + 具体操作（比如创建，启动，停止，删除） docker image pull nginx： 拉取一个叫nginx的docke</description></item><item><title>Python 高级编程（十三）asyncio</title><link>https://boh5.com/posts/notes/languages/python/imooc/13-asyncio/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/languages/python/imooc/13-asyncio/</guid><description>1. 事件循环 并发编程3要素：事件循环 + 回调（协程中为驱动生成器） + IO 多路复用 asyncio 是 python 用于解决异步 IO 编程的一整套解决方案 python 的异步编程框架：torn</description></item><item><title>Python 高级编程（十二）协程</title><link>https://boh5.com/posts/notes/languages/python/imooc/12-coroutine/</link><pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/languages/python/imooc/12-coroutine/</guid><description>1. 并发、并行、同步、异步、阻塞、非阻塞 并发：一个时间段内在同一个 cpu 上有多个程序在运行，但任意时刻只有一个程序在运行 并行：任意时刻多个程序同时</description></item><item><title>Python 高级编程（九）迭代器和生成器</title><link>https://boh5.com/posts/notes/languages/python/imooc/9-iterator-generator/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/languages/python/imooc/9-iterator-generator/</guid><description>1. python 中的迭代协议 迭代器是访问集合内元素的一种方式，一般用来遍历数据。迭代器提供了一种惰性访问数据的方式。 下标访问依赖：__getitem__</description></item><item><title>Elasticsearch 入门</title><link>https://boh5.com/posts/notes/databases/elasticsearch/atguigu_elasticsearch_lesson/elasticsearch-basic-usage/</link><pubDate>Mon, 08 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/databases/elasticsearch/atguigu_elasticsearch_lesson/elasticsearch-basic-usage/</guid><description>1. 数据格式 将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比: Types 的概念已经被逐渐弱化，Elasticsearch 6.X 中，一个 index 下已经</description></item><item><title>Golang Backend Tips - 记录 Golang 后端开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/golang-backend/</link><pubDate>Tue, 06 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/golang-backend/</guid><description>dbdiagram 在线数据库设计工具</description></item><item><title>gRPC Tips - 记录 gRPC 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/grpc/</link><pubDate>Tue, 06 Sep 2022 22:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/grpc/</guid><description>evans gRPC 客户端，交互式调用 gRPC server</description></item><item><title>Golang Tips - 记录 Golang 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/common/</link><pubDate>Sun, 04 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/common/</guid><description>使用 testing.T.Parallel() 来并行运行测试，同时可以及时发现资源竞争问题 1 2 3 4 5 6 7 8 9 10 package serializer import ( &amp;#34;testing&amp;#34; ) func TestWriteProtobufToBinaryFile(t *testing.T) { t.Parallel() // ... } 使用 Testify 来简化测试的 Assertions 和 Mocks golangci-lint 配置 testpackage 和 paralleltest 来启动</description></item><item><title>深入理解 Asyncio，从零开始构建你自己的并发调度器</title><link>https://boh5.com/posts/blogs/basis/build-your-own-async/</link><pubDate>Sun, 28 Aug 2022 15:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/blogs/basis/build-your-own-async/</guid><description>Python 并发实现的两种方式： 基于回调的实现 基于生成器(协程)的实现 下面将基于两个简单的例子分别介绍如何从 0 开始以两种方式实现自己的异步框架： 相互独</description></item><item><title>Web 协议学习笔记(一) HTTP1 协议</title><link>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</guid><description>1. HTTP 协议简介 1.1 浏览器发起 HTTP 请求的典型场景 1.2 HTTP 协议格式 1.3 基于 ABNF 语义定义 HTTP 消息格式 ABNF: 扩充巴克斯-瑙尔范式 1.3.1 ABNF 操作符 空白字符：用来分隔定义中的各个</description></item><item><title>数据结构和算法学习笔记（三）二叉树</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</link><pubDate>Mon, 22 Aug 2022 20:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</guid><description>1. 遍历二叉树 递归序 1,2,4,4,4,2,5,5,5,2,1,3,6,6,6,3,7,7,7,3,1 即为递归序 先序遍历 对于每棵子树，先打印头节点，再打印左子树，再打印右子树 在递归序中，只有第一次碰到，才打印 中序遍历 对于每</description></item><item><title>K8s 学习笔记（七）安全认证和 DashBoard</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/7-k8s-auth-and-dashboard/</link><pubDate>Mon, 22 Aug 2022 16:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/7-k8s-auth-and-dashboard/</guid><description>1. 安全认证 1.1 访问控制 所谓的安全性其实就是保证对Kubernetes的各种客户端进行认证和鉴权操作。 客户端 在Kubernetes集群中，客户端</description></item><item><title>K8s 学习笔记（六）数据存储</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/6-k8s-volume/</link><pubDate>Mon, 22 Aug 2022 14:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/6-k8s-volume/</guid><description>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernet</description></item><item><title>K8s 学习笔记（五）Service 详解</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/5-k8s-service-advanced/</link><pubDate>Sun, 21 Aug 2022 16:16:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/5-k8s-service-advanced/</guid><description>1. Service 介绍 在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味</description></item><item><title>K8s 学习笔记（四）Pod 控制器详解</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/4-k8s-pod-controller-advanced/</link><pubDate>Sat, 20 Aug 2022 01:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/4-k8s-pod-controller-advanced/</guid><description>1. Pod控制器介绍 Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建</description></item></channel></rss>