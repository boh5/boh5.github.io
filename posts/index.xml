<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 黄波的博客</title><link>https://dilless.github.io/posts/</link><description>所有文章 | 黄波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 20 Aug 2022 01:00:00 +0800</lastBuildDate><atom:link href="https://dilless.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>K8s 学习笔记（四）Pod 控制器详解</title><link>https://dilless.github.io/posts/notes/devops/k8s/itheima/4-k8s-pod-controller-advanced/</link><pubDate>Sat, 20 Aug 2022 01:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/k8s/itheima/4-k8s-pod-controller-advanced/</guid><description>1. Pod控制器介绍 Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建</description></item><item><title>K8s 学习笔记（三）Pod 详解</title><link>https://dilless.github.io/posts/notes/devops/k8s/itheima/3-k8s-pod-advanced/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/k8s/itheima/3-k8s-pod-advanced/</guid><description>1. Pod 介绍 1.1 Pod 结构 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类： 用户程序所在的容器，数量可多可少 Pause容器，这是每个Pod</description></item><item><title>数据结构和算法学习笔记（二）链表</title><link>https://dilless.github.io/posts/notes/datastructure_algorithm/zuochengyun/2-linked-list/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/datastructure_algorithm/zuochengyun/2-linked-list/</guid><description>1. 单链表和双链表 笔试 vs 面试 笔试：时间复杂度越低越好 面试：时间复杂度越低越好，空间复杂度也要低 链表题目技巧 额外数据结构记录（哈希表等） 快慢指针</description></item><item><title>K8s 学习笔记（二）入门</title><link>https://dilless.github.io/posts/notes/devops/k8s/itheima/2-k8s-getting-start/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/k8s/itheima/2-k8s-getting-start/</guid><description>1. Namespace Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现多套环境的资源隔离或者多租户的资源隔离。 默认情况</description></item><item><title>K8s 学习笔记（一）基础</title><link>https://dilless.github.io/posts/notes/devops/k8s/itheima/1-k8s-base/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/k8s/itheima/1-k8s-base/</guid><description>1. Kubernetes 介绍 1.1 应用部署方式的演变 直接部署在物理机 -&amp;gt; 虚拟化部署 -&amp;gt; 容器化部署 容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说： 一个容器故</description></item><item><title>Docker 学习笔记（十二）容器安全</title><link>https://dilless.github.io/posts/notes/devops/docker/imooc/12-docker-security/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/docker/imooc/12-docker-security/</guid><description>1. Docker 配置扫描 docker-bench-security 2. 代码和镜像漏洞扫描 CVE：国际著名的安全漏洞库，也是对已知漏洞和安全缺陷的标准化名称的列表。 代码扫描 synk 镜像扫描 trivy 3. 容器运行监</description></item><item><title>Docker 学习笔记（十一）GitHub Actions - CI/CD</title><link>https://dilless.github.io/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/docker/imooc/11-docker-cicd-with-git/</guid><description>1. GitHub Actions GitHub Actions 是一个持续集成和持续交付 (CI/CD) 平台，可用于自动执行构建、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的</description></item><item><title>Docker 学习笔记（八）docker swarm</title><link>https://dilless.github.io/posts/notes/devops/docker/imooc/8-docker-swarm/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/docker/imooc/8-docker-swarm/</guid><description>1. docker swarm 简介 1.1 不建议生产环境使用 docker-compose docker compose 是单机环境，物理机如果挂掉，上面的容器全部会挂掉，无法保证可靠性 无法跨机器做横向扩展 1.2 容器编排 swarm 多个 ma</description></item><item><title>Docker 学习笔记（九）docker vs podman</title><link>https://dilless.github.io/posts/notes/devops/docker/imooc/9-docker-vs-podman/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/docker/imooc/9-docker-vs-podman/</guid><description>1. podman 简介 1.1 什么是 podman Podman 是一个基于 Linux 系统的 daemon-less 的容器引擎。 可以用来开发，管理和运行 OCI 标准的容器. podman 可以运行在 root 或者非 root 用户模式。 podman 与 docker 命令完全兼容</description></item><item><title>Docker 学习笔记（十）docker 的多架构支持</title><link>https://dilless.github.io/posts/notes/devops/docker/imooc/10-docker-arch/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/devops/docker/imooc/10-docker-arch/</guid><description>1. 使用 buildx 构建多架构支持的 Docker 镜像 Docker for Linux 不支持构建 arm 架构镜像，我们可以运行一个新的容器让其支持该特性，Docker 桌面版无需进行此项设置： docker run --rm</description></item></channel></rss>