<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Asyncio - 标签 - 黄波的博客</title><link>https://dilless.github.io/tags/asyncio/</link><description>Asyncio - 标签 - 黄波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 28 Aug 2022 15:00:00 +0800</lastBuildDate><atom:link href="https://dilless.github.io/tags/asyncio/" rel="self" type="application/rss+xml"/><item><title>深入理解 Asyncio，从零开始构建你自己的并发调度器</title><link>https://dilless.github.io/posts/blogs/basis/build-your-own-async/</link><pubDate>Sun, 28 Aug 2022 15:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/blogs/basis/build-your-own-async/</guid><description>Python 并发实现的两种方式： 基于回调的实现 基于生成器(协程)的实现 下面将基于两个简单的例子分别介绍如何从 0 开始以两种方式实现自己的异步框架： 相互独</description></item><item><title>Python 高级编程（十三）asyncio</title><link>https://dilless.github.io/posts/notes/languages/python/imooc/13-asyncio/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://dilless.github.io/posts/notes/languages/python/imooc/13-asyncio/</guid><description>1. 事件循环 并发编程3要素：事件循环 + 回调（协程中为驱动生成器） + IO 多路复用 asyncio 是 python 用于解决异步 IO 编程的一整套解决方案 python 的异步编程框架：torn</description></item></channel></rss>