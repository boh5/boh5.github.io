<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>黄波的博客</title><link>https://boh5.com/</link><description>Python、后端、笔记和技术分享</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 15 Sep 2022 17:00:00 +0800</lastBuildDate><atom:link href="https://boh5.com/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构和算法学习笔记（五）前缀树和贪心算法</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/5-trei-and-greedy-algorithm/</link><pubDate>Thu, 15 Sep 2022 17:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/5-trei-and-greedy-algorithm/</guid><description>1. 前缀树 维基百科 - Trie 在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键</description></item><item><title>数据结构和算法学习笔记（四）图</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/4-graph/</link><pubDate>Tue, 13 Sep 2022 22:40:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/4-graph/</guid><description>1. 图的数据结构 图分为 有向图 和 无向图 图的一种数据结构： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package graph type Edge struct { Weight int // 权重(距离...) From *Node // 从哪个</description></item><item><title>Golang Backend Tips - 记录 Golang 后端开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/golang-backend/</link><pubDate>Tue, 06 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/golang-backend/</guid><description>dbdiagram 在线数据库设计工具</description></item><item><title>gRPC Tips - 记录 gRPC 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/grpc/</link><pubDate>Tue, 06 Sep 2022 22:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/grpc/</guid><description>evans gRPC 客户端，交互式调用 gRPC server</description></item><item><title>Golang Tips - 记录 Golang 开发中遇到的小问题和最佳实践</title><link>https://boh5.com/posts/tips/languages/golang/common/</link><pubDate>Sun, 04 Sep 2022 23:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/tips/languages/golang/common/</guid><description>使用 testing.T.Parallel() 来并行运行测试，同时可以及时发现资源竞争问题 1 2 3 4 5 6 7 8 9 10 package serializer import ( &amp;#34;testing&amp;#34; ) func TestWriteProtobufToBinaryFile(t *testing.T) { t.Parallel() // ... } 使用 Testify 来简化测试的 Assertions 和 Mocks golangci-lint 配置 testpackage 和 paralleltest 来启动</description></item><item><title>深入理解 Asyncio，从零开始构建你自己的并发调度器</title><link>https://boh5.com/posts/blogs/basis/build-your-own-async/</link><pubDate>Sun, 28 Aug 2022 15:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/blogs/basis/build-your-own-async/</guid><description>Python 并发实现的两种方式： 基于回调的实现 基于生成器(协程)的实现 下面将基于两个简单的例子分别介绍如何从 0 开始以两种方式实现自己的异步框架： 相互独</description></item><item><title>Web 协议学习笔记(一) HTTP1 协议</title><link>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/networks/web-protocol/geekbang/1-http1-protocol/</guid><description>1. HTTP 协议简介 1.1 浏览器发起 HTTP 请求的典型场景 1.2 HTTP 协议格式 1.3 基于 ABNF 语义定义 HTTP 消息格式 ABNF: 扩充巴克斯-瑙尔范式 1.3.1 ABNF 操作符 空白字符：用来分隔定义中的各个</description></item><item><title>数据结构和算法学习笔记（三）二叉树</title><link>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</link><pubDate>Mon, 22 Aug 2022 20:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/datastructure_algorithm/zuochengyun/3-binary-tree/</guid><description>1. 遍历二叉树 递归序 1,2,4,4,4,2,5,5,5,2,1,3,6,6,6,3,7,7,7,3,1 即为递归序 先序遍历 对于每棵子树，先打印头节点，再打印左子树，再打印右子树 在递归序中，只有第一次碰到，才打印 中序遍历 对于每</description></item><item><title>K8s 学习笔记（七）安全认证和 DashBoard</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/7-k8s-auth-and-dashboard/</link><pubDate>Mon, 22 Aug 2022 16:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/7-k8s-auth-and-dashboard/</guid><description>1. 安全认证 1.1 访问控制 所谓的安全性其实就是保证对Kubernetes的各种客户端进行认证和鉴权操作。 客户端 在Kubernetes集群中，客户端</description></item><item><title>K8s 学习笔记（六）数据存储</title><link>https://boh5.com/posts/notes/devops/k8s/itheima/6-k8s-volume/</link><pubDate>Mon, 22 Aug 2022 14:00:00 +0800</pubDate><author>黄波</author><guid>https://boh5.com/posts/notes/devops/k8s/itheima/6-k8s-volume/</guid><description>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernet</description></item></channel></rss>